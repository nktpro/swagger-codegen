/// <reference path="./tsd.d.ts" />
import {Request} from "superagent";
import Promise from 'bluebird';
import * as request from 'superagent';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

{{#models}}
{{#model}}
{{#description}}
/**
* {{{description}}}
*/
{{/description}}
export class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
{{#description}}
  /**
  * {{{description}}}
  */
{{/description}}
  {{name}}: {{#isEnum}}{{classname}}.{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}
}

{{#hasEnums}}
export namespace {{classname}} {
{{#vars}}
{{#isEnum}}
  export enum {{datatypeWithEnum}} { {{#allowableValues}}{{#values}}
    {{.}} = <any> '{{.}}',{{/values}}{{/allowableValues}}
  }
{{/isEnum}}
{{/vars}}
}
{{/hasEnums}}
{{/model}}
{{/models}}

interface Authentication {
  /**
  * Apply authentication settings to header and query params.
  */
  applyToRequest(req: Request<any>): Request<any>;
}

class HttpBasicAuth implements Authentication {
  public username: string;
  public password: string;
  applyToRequest(req: Request<any>): Request<any> {
    return req.auth(this.username, this.password);
  }
}

class ApiKeyAuth implements Authentication {
  public apiKey: string;

  constructor(private location: string, private paramName: string) {
  }

  applyToRequest(req: Request<any>): Request<any> {
    if (this.location == "query") {
      return req.query({[this.paramName]: this.apiKey});
    }

    if (this.location == "header") {
      return req.set(this.paramName, this.apiKey);
    }

    return req;
  }
}

class OAuth implements Authentication {
  applyToRequest(req: Request<any>): Request<any> {
    return req;
  }
}

class VoidAuth implements Authentication {
  public username: string;
  public password: string;
  applyToRequest(req: Request<any>): Request<any> {
    return req;
  }
}

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export class {{classname}} {
  private basePath = '{{basePath}}';
  public authentications = {
    'default': <Authentication>new VoidAuth(),
{{#authMethods}}
{{#isBasic}}
    '{{name}}': new HttpBasicAuth(),
{{/isBasic}}
{{#isApiKey}}
    '{{name}}': new ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{^isKeyInHeader}}'query'{{/isKeyInHeader}}, '{{keyParamName}}'),
{{/isApiKey}}
{{#isOAuth}}
    '{{name}}': new OAuth(),
{{/isOAuth}}
{{/authMethods}}
  };

  constructor(url: string, basePath?: string);
{{#authMethods}}
{{#isBasic}}
  constructor(url: string, username: string, password: string, basePath?: string);
{{/isBasic}}
{{/authMethods}}
  constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
    if (password) {
{{#authMethods}}
{{#isBasic}}
      this.username = basePathOrUsername;
      this.password = password
{{/isBasic}}
{{/authMethods}}
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername
      }
    }
  }
{{#authMethods}}
{{#isBasic}}

  set username(username: string) {
    this.authentications.{{name}}.username = username;
  }

  set password(password: string) {
    this.authentications.{{name}}.password = password;
  }
{{/isBasic}}
{{#isApiKey}}

  set apiKey(key: string) {
    this.authentications.{{name}}.apiKey = key;
  }
{{/isApiKey}}
{{#isOAuth}}
{{/isOAuth}}
{{/authMethods}}
{{#operation}}

  public {{nickname}}({{^allParams.isEmpty}}params: {
{{#allParams}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#hasMore}},{{/hasMore}}
{{/allParams}}
  }{{/allParams.isEmpty}}): Promise<{{{returnType}}}> {
  {{#allParams}}{{#required}}
    // verify required parameter '{{paramName}}' is set
    if (typeof params.{{paramName}} == 'undefined') {
      throw new Error('Missing required parameter {{paramName}} when calling {{nickname}}');
    }
  {{/required}}{{/allParams}}

    let path = this.url + this.basePath + '{{path}}';

{{#pathParams}}
    path = path.replace(`{${ params.{{baseName}} }}`, String(params.{{paramName}}));

{{/pathParams}}
    let queryParameters: any = {};
    let headerParams: any = {};
    let formParams: any = {};

{{#queryParams}}
    if (typeof params.{{paramName}} != 'undefined') {
      queryParameters['{{baseName}}'] = params.{{paramName}};
    }

{{/queryParams}}
{{#headerParams}}
    headerParams['{{baseName}}'] = params.{{paramName}};
{{/headerParams}}
    let useFormData = false;

{{#formParams}}
    if (params.{{paramName}} !== undefined) {
      formParams['{{baseName}}'] = params.{{paramName}};
    }
{{#isFile}}
    useFormData = true;
{{/isFile}}

{{/formParams}}
    return new Promise<{{{returnType}}}>((resolve, reject) => {
      {{#bodyParam}}
      let body = params.{{paramName}};

      {{/bodyParam}}
      {{#authMethods}}
      /*Auth method {{name}}*/

      {{/authMethods}}
      let req = request(`{{httpMethod}}`, path)
        .set(headerParams)
        .query(queryParameters)
        .send(formParams);
      {{#authMethods}}
      req = this.authentications.{{name}}.applyToRequest(req);

      {{/authMethods}}
      req.end((error, response) => {
        if (error !== null) {
          reject(error);
        }
        else {
          resolve(response.body);
        }
      });
    });
  }
{{/operation}}
}
{{/operations}}
{{/apis}}
{{/apiInfo}}